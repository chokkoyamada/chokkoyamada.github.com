<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Continuous Ops]]></title>
  <link href="http://chokkoyamada.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://chokkoyamada.github.io/"/>
  <updated>2014-07-17T13:20:31+09:00</updated>
  <id>http://chokkoyamada.github.io/</id>
  <author>
    <name><![CDATA[Naoyuki Yamada]]></name>
    <email><![CDATA[yamada_naoyuki@cyberagent.co.jp]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOSユーザーのためのUbuntu Linux入門(1)]]></title>
    <link href="http://chokkoyamada.github.io/blog/2013/11/18/ubuntu-linux-tutorial-for-centos-user/"/>
    <updated>2013-11-18T20:12:00+09:00</updated>
    <id>http://chokkoyamada.github.io/blog/2013/11/18/ubuntu-linux-tutorial-for-centos-user</id>
    <content type="html"><![CDATA[<h2>Ubuntuを使うシチュエーション</h2>

<p>Ubuntuに入門したいCentOSユーザーというのは私自身のことです。</p>

<p>最近、Ubuntu Linuxを使いこなせるようになりたいと思う場面が多いです。
普段はCentOSまたはAmazon Linuxを使っていて、Debian系のUbuntuはおそらく全く使えないということはないのでしょうが、なんとなくハードルを感じてしまうところがあります。</p>

<p>前職では最初Ubuntuを使っているシステムがいくつかあったので、厳密にいうと私が最初にログインしてちょっと触ったLinuxはUbuntuでした。
ただそのときは実質的に何もいじらなかった(ログインしたことあるだけ)ので、ソーシャルゲームを開発することになって、CentOSを本気で触り始めたのが最初です。
それ以来、CentOSばかり使っています。</p>

<p>CentOSを勉強し始めたときは、自分でキューブ型PCを買ってきて、自分の部屋においてセットアップしました。
確かCentOSのイメージを落としてきてDVD-Rか何かに焼いて、それを使ってセットアップした記憶があります。</p>

<p>今Linuxのサーバーを新しく作ろうと思った場合、VirtualBox(Vagrant)やDockerがあるから楽です。
そもそもVagrantやDockerをより深く知りたいがためにUbuntuをやろうと思ったという動機もあります。
chefも（最近少なくなってきましたが）Ubuntuのほうがやりやすい部分があったり、Tizenも現状ではUbuntu前提ですよね。</p>

<p>というわけで、Ubuntuも抵抗感なく普通に使えるほうがよさげなのできちんとさわってみることにしました。　</p>

<h2>バージョンの違いなど</h2>

<p>CentOSだと、いま選ぶのはだいたい5か6系だと思います。
6.4が最新。5.10もStableバージョンで<a href="http://wiki.centos.org/Download">2017年までメンテナンスされる予定</a>ですが、今なら6.4を選んで問題はないでしょう。</p>

<p>Ubuntuのほうですが、<a href="http://www.ubuntulinux.jp/ubuntu">このへんを見るに</a>、12か13系あたりが選択肢になりそうです。
13系はまだ安定バージョンが無いようなので、2017年までサポート予定の12.04(コードネーム：Precise Pangolin)を選んでみることにします。</p>

<p>というわけで、それ用のvagrant boxを追加します。(<a href="http://www.vagrantbox.es">http://www.vagrantbox.es</a> より)</p>

<p><code>
$ vagrant box add ubuntu12 http://cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-vagrant-disk1.box
</code></p>

<p>CentOSでは32bitのものをi386、64bitのものをx86_64と呼んでいましたが、Ubuntuでは64bitのほうをamd64と呼ぶようですね。　</p>

<p>vagrantでとりあえず起動してみます。</p>

<p>```
Welcome to Ubuntu 12.04.3 LTS (GNU/Linux 3.2.0-56-generic x86_64)</p>

<ul>
<li>Documentation:  <a href="https://help.ubuntu.com/">https://help.ubuntu.com/</a></li>
</ul>


<p>  System information as of Mon Nov 18 11:44:43 UTC 2013</p>

<p>  System load:  0.17              Processes:           69
  Usage of /:   2.7% of 39.37GB   Users logged in:     0
  Memory usage: 30%               IP address for eth0: 10.0.2.15
  Swap usage:   0%                IP address for eth1: 192.168.33.11</p>

<p>  Graph this data and manage this system at <a href="https://landscape.canonical.com/">https://landscape.canonical.com/</a></p>

<p>  Get cloud support with Ubuntu Advantage Cloud Guest:</p>

<pre><code>http://www.ubuntu.com/business/services/cloud
</code></pre>

<p>  Use Juju to deploy your cloud instances and workloads:</p>

<pre><code>https://juju.ubuntu.com/#cloud-precise
</code></pre>

<p>0 packages can be updated.
0 updates are security updates.</p>

<hr />

<p>WARNING! Your environment specifies an invalid locale.
 This can affect your user experience significantly, including the
 ability to manage packages. You may install the locales by running:</p>

<p>   sudo apt-get install language-pack-ja</p>

<pre><code> or
</code></pre>

<p>   sudo locale-gen ja_JP.UTF-8</p>

<p>To see all available language packs, run:
   apt-cache search &ldquo;^language-pack-[a-z][a-z]$&rdquo;
To disable this message for all users, run:
   sudo touch /var/lib/cloud/instance/locale-check.skip</p>

<hr />

<p>vagrant@vagrant-ubuntu-precise-64:~$</p>

<p>```</p>

<p>いきなり親切なメッセージがいろいろ出てきました。</p>

<p>何かパッケージ入れてみようと思い、apacheはCentOSだとhttpdですがUbuntuはapache2というくらいは知っていたのですがあえてapt-get install httpdとやってみると、</p>

<p>```
root@vagrant-ubuntu-precise-64:~# apt-get install httpd
Reading package lists&hellip; Done
Building dependency tree
Reading state information&hellip; Done
Package httpd is a virtual package provided by:
  nginx-naxsi 1.1.19-1ubuntu0.4
  nginx-light 1.1.19-1ubuntu0.4
  nginx-full 1.1.19-1ubuntu0.4
  nginx-extras 1.1.19-1ubuntu0.4
  apache2-mpm-itk 2.2.22-1ubuntu1.4
  apache2-mpm-worker 2.2.22-1ubuntu1.4
  apache2-mpm-prefork 2.2.22-1ubuntu1.4
  apache2-mpm-event 2.2.22-1ubuntu1.4
  yaws 1.92-1
  webfs 1.21+ds1-8
  tntnet 2.0+dfsg1-2
  ocsigen 1.3.4-2build4
  monkey 0.9.3-1ubuntu1
  mini-httpd 1.19-9.2build1
  micro-httpd 20051212-13
  mathopd 1.5p6-1.1
  lighttpd 1.4.28-2ubuntu4
  ebhttpd 1:1.0.dfsg.1-4.2build1
  cherokee 1.2.101-1
  bozohttpd 20100920-1
  boa 0.94.14rc21-3.1
  aolserver4-daemon 4.5.1-15
  aolserver4-core 4.5.1-15
You should explicitly select one to install.</p>

<p>E: Package &lsquo;httpd&rsquo; has no installation candidate
```</p>

<p>けっこう気が利く感じです。</p>

<p>apache2を入れてみます。</p>

<p>```
root@vagrant-ubuntu-precise-64:~# apt-get install apache2
Reading package lists&hellip; Done
Building dependency tree
Reading state information&hellip; Done
The following extra packages will be installed:
  apache2-mpm-worker apache2-utils apache2.2-bin apache2.2-common libapr1
  libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap ssl-cert
Suggested packages:
  apache2-doc apache2-suexec apache2-suexec-custom openssl-blacklist
The following NEW packages will be installed:
  apache2 apache2-mpm-worker apache2-utils apache2.2-bin apache2.2-common
  libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap ssl-cert
0 upgraded, 10 newly installed, 0 to remove and 0 not upgraded.
Need to get 1,855 kB of archives.
After this operation, 5,681 kB of additional disk space will be used.
Do you want to continue [Y/n]? y
Get:1 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise/main libapr1 amd64 1.4.6-1 [89.6 kB]
Get:2 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise/main libaprutil1 amd64 1.3.12+dfsg-3 [74.6 kB]
Get:3 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise/main libaprutil1-dbd-sqlite3 amd64 1.3.12+dfsg-3 [10.4 kB]
Get:4 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise/main libaprutil1-ldap amd64 1.3.12+dfsg-3 [8,044 B]
Get:5 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise-updates/main apache2.2-bin amd64 2.2.22-1ubuntu1.4 [1,340 kB]
Get:6 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise-updates/main apache2-utils amd64 2.2.22-1ubuntu1.4 [90.1 kB]
Get:7 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise-updates/main apache2.2-common amd64 2.2.22-1ubuntu1.4 [226 kB]
Get:8 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise-updates/main apache2-mpm-worker amd64 2.2.22-1ubuntu1.4 [2,284 B]
Get:9 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise-updates/main apache2 amd64 2.2.22-1ubuntu1.4 [1,492 B]
Get:10 <a href="http://archive.ubuntu.com/ubuntu/">http://archive.ubuntu.com/ubuntu/</a> precise-updates/main ssl-cert all 1.0.28ubuntu0.1 [12.3 kB]
Fetched 1,855 kB in 7s (236 kB/s)
Preconfiguring packages &hellip;
Selecting previously unselected package libapr1.
(Reading database &hellip; 61149 files and directories currently installed.)
Unpacking libapr1 (from &hellip;/libapr1_1.4.6-1_amd64.deb) &hellip;
Selecting previously unselected package libaprutil1.
Unpacking libaprutil1 (from &hellip;/libaprutil1_1.3.12+dfsg-3_amd64.deb) &hellip;
Selecting previously unselected package libaprutil1-dbd-sqlite3.
Unpacking libaprutil1-dbd-sqlite3 (from &hellip;/libaprutil1-dbd-sqlite3_1.3.12+dfsg-3_amd64.deb) &hellip;
Selecting previously unselected package libaprutil1-ldap.
Unpacking libaprutil1-ldap (from &hellip;/libaprutil1-ldap_1.3.12+dfsg-3_amd64.deb) &hellip;
Selecting previously unselected package apache2.2-bin.
Unpacking apache2.2-bin (from &hellip;/apache2.2-bin_2.2.22-1ubuntu1.4_amd64.deb) &hellip;
Selecting previously unselected package apache2-utils.
Unpacking apache2-utils (from &hellip;/apache2-utils_2.2.22-1ubuntu1.4_amd64.deb) &hellip;
Selecting previously unselected package apache2.2-common.
Unpacking apache2.2-common (from &hellip;/apache2.2-common_2.2.22-1ubuntu1.4_amd64.deb) &hellip;
Selecting previously unselected package apache2-mpm-worker.
Unpacking apache2-mpm-worker (from &hellip;/apache2-mpm-worker_2.2.22-1ubuntu1.4_amd64.deb) &hellip;
Selecting previously unselected package apache2.
Unpacking apache2 (from &hellip;/apache2_2.2.22-1ubuntu1.4_amd64.deb) &hellip;
Selecting previously unselected package ssl-cert.
Unpacking ssl-cert (from &hellip;/ssl-cert_1.0.28ubuntu0.1_all.deb) &hellip;
Processing triggers for man-db &hellip;
Processing triggers for ureadahead &hellip;
Processing triggers for ufw &hellip;
Setting up libapr1 (1.4.6-1) &hellip;
Setting up libaprutil1 (1.3.12+dfsg-3) &hellip;
Setting up libaprutil1-dbd-sqlite3 (1.3.12+dfsg-3) &hellip;
Setting up libaprutil1-ldap (1.3.12+dfsg-3) &hellip;
Setting up apache2.2-bin (2.2.22-1ubuntu1.4) &hellip;
Setting up apache2-utils (2.2.22-1ubuntu1.4) &hellip;
Setting up apache2.2-common (2.2.22-1ubuntu1.4) &hellip;
Enabling site default.
Enabling module alias.
Enabling module autoindex.
Enabling module dir.
Enabling module env.
Enabling module mime.
Enabling module negotiation.
Enabling module setenvif.
Enabling module status.
Enabling module auth_basic.
Enabling module deflate.
Enabling module authz_default.
Enabling module authz_user.
Enabling module authz_groupfile.
Enabling module authn_file.
Enabling module authz_host.
Enabling module reqtimeout.
Setting up apache2-mpm-worker (2.2.22-1ubuntu1.4) &hellip;
 * Starting web server apache2                                                                                              apache2: Could not reliably determine the server&rsquo;s fully qualified domain name, using 127.0.1.1 for ServerName</p>

<pre><code>                                                                                                                 [ OK ]
</code></pre>

<p>Setting up apache2 (2.2.22-1ubuntu1.4) &hellip;
Setting up ssl-cert (1.0.28ubuntu0.1) &hellip;
Processing triggers for libc-bin &hellip;
ldconfig deferred processing now taking place</p>

<p>```</p>

<p>どうやらworkerのmpmだけがインストールされ、さらにapacheが勝手に起動しました(；´Д｀)
パッケージ入れただけなのに。。。</p>

<p><code>
root@vagrant-ubuntu-precise-64:~# /etc/init.d/apache2 status
Apache2 is running (pid 2595).
</code></p>

<p>いきなり勝手が違っててもやもやしてきたわけですが、続く。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最速ウェブアプリのためのJDBC再入門(1)]]></title>
    <link href="http://chokkoyamada.github.io/blog/2013/05/21/dig-into-jdbc/"/>
    <updated>2013-05-21T21:40:00+09:00</updated>
    <id>http://chokkoyamada.github.io/blog/2013/05/21/dig-into-jdbc</id>
    <content type="html"><![CDATA[<h2>Javaの記事はどれも古い！</h2>

<p>Javaを仕事で書けるようになるためにあらためて勉強しているのですが、Javaの記事をぐぐってみると古い記事があたることが多いです。</p>

<p>Javaは後方互換性に優れているので10年前の記事でも余裕で参考になるのですが、それでも例えば2003年の記事を読んだだけだと現在の状況にどこまで適用してよい話なのか不安が残ります。</p>

<p>Oracleの公式ドキュメントをあたってみても、全てが日本語訳されているわけではなく、重い腰あげて読み込まないとなという気持ちがします。</p>

<p>いまの私の仕事は運用エンジニアということもあってJavaのアプリケーションコードを自分で書いてはいないのですが、重要な場面ではコードの細部まで追って対応できることが不可欠。その中でもデータベース周りはクリティカルに効いてくることが多いので、深く理解しておきたいと思っています。</p>

<h2>Java(Servlet + JDBC(Connector-J))は相当速い</h2>

<p>最近、下記のウェブアプリケーションのベンチマークが話題になりました。</p>

<p><a href="http://www.techempower.com/benchmarks/">http://www.techempower.com/benchmarks/</a></p>

<p>これを見ると、JavaのServletは常に上位にいます。
私自身の最近の仕事の経験からしても、Servlet+JDBCの組み合わせはかなりのスループットが出ます。チューニングしていくたびにどんどん速くなってきたし、まだ速くする余地がかなりあるんじゃないかと思っています。</p>

<p>ベンチマークのソースを見たのですが、DataSourceのオプションなどはかなり参考になります。</p>

<p><a href="https://github.com/TechEmpower/FrameworkBenchmarks/">https://github.com/TechEmpower/FrameworkBenchmarks/</a></p>

<p>Javaでウェブアプリケーションを書くことが常にベストの選択とは思いませんが、レスポンスタイムとスループットを安定して出したい場合の選択としてはかなりいい線行ってると思います。これをもっと極めていきたいです。</p>

<p>そこで、シリーズものとして、JavaのデータベースライブラリであるJDBCについてまとまったものを書いてみたいと思います。JDBCの基礎から始めて、1台あたり1000req/secを<a href="http://www.slideshare.net/Satully/jaws2013lt-1000qps">50msec以内で安定して返し続けるサーバー</a>に必要なチューニングまで、順にステップアップしながら自分自身の勉強を兼ねて書いていきます。</p>

<h2>環境は、CentOS6 &ndash; Java7 &ndash; tomcat7 &ndash; JDBC5.1 &ndash; MySQL5.5</h2>

<p>前提となる環境ですが、まずサーバーはMac OS X 10.7のローカルで開発しつつ適宜<a href="http://www.vagrantbox.es">VagrantでCentoS 6.3</a>を起動して使います。ある程度細かくベンチマークを取りたい場合はAWSで<a href="http://aws.amazon.com/jp/amazon-linux-ami/">Amazon Linux(最新版)</a>を使います。</p>

<p>Javaはバージョン1.7で<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">Oracle公式のJDK</a>を使います。
アプリケーションサーバーは<a href="http://tomcat.apache.org/tomcat-7.0-doc/">tomcatのバージョン7</a>、JDBCドライバは<a href="http://mvnrepository.com/artifact/mysql/mysql-connector-java">mysql-connector-java</a>の5.1系です。
<a href="http://dev.mysql.com/doc/refman/5.5/en/index.html">MySQLは5.5</a>です。</p>

<p>まずはOracle公式やその他の入門記事に沿って簡単なウェブアプリを作っていきながらひと通りのJDBCの機能を使っていきます。</p>

<p><a href="/special/jdbc">→最速ウェブアプリのためのJDBC再入門TOPへ</a></p>
]]></content>
  </entry>
  
</feed>
